UB = xbar + c * (sigma / sqrt(n))
capture[i] = (mu > LB && mu < UB)
}
print(mean(capture))
runiform?
?runiform
??runiform
??runif
a = 0
b = 625
n = 1
theta = 25
trials = 50000
capture = logical(trials)
data = runif(n, a, b)
for (i in 1:trials) {
data = runif(n, a, b)
theta_hat = sqrt(2*mean(data))
LB = theta_hat
UB = 2 * theta_hat
capture[i] = (theta > LB && theta < UB)
}
print(mean(capture))
# Q 60
sim = rnorm(7, 4, sqrt(6))
# Q 60
sim = rnorm(7, 4, sqrt(6))
# Q 60
sim = rnorm(7, 4, sqrt(6))
variance = var(sim)
# Q 60
trials = 10000
sample_var = vector(length=trials)
for (i in 1:trials) {
sim = rnorm(7, 4, sqrt(6))
variance = var(sim)
sample_var[i] = variance
}
d = density(sample_var)
plot(d)
plot(d, main="Sample Variance")
libary(ggplot)
library(ggplot)
library(ggplot2)
lines(rchisq(7, 6))
lines(density(rchisq(7, 6)))
d = density(sample_var)
plot(d, lwd=2, main="Distribution of Sample Variance")
lines(density(rchisq(7, 6)))
lines(density(rchisq(trials, 6)))
d = density(sample_var)
plot(d, lwd=2, main="Distribution of Sample Variance")
lines(density(rchisq(trials, 6)))
lines(density(rchisq(trials, 6)), col='red')
lines(density(rchisq(trials, 6)), col='red', lwd=2)
curve(dchisq(x, 6), col='red')
d = density(sample_var)
plot(d, lwd=2, main="Distribution of Sample Variance")
curve(dchisq(x, 6), col='red')
curve(dchisq(x, 6), col='red', add=TRUE)
plot(d, lwd=2, main="Distribution of Sample Variance")
curve(dchisq(x, 6), col='red', add=TRUE)
curve(dchisq(x, 6), col='red', add=TRUE, lwd=2)
curve(dchisq(x, 6), col='red', add=TRUE, lwd=2, lty=2)
d = density(sample_var)
plot(d, lwd=2, main="Distribution of Sample Variance")
curve(dchisq(x, 6), col='red', add=TRUE, lwd=2, lty=2)
plot(d, lwd=2, lty=2, main="Distribution of Sample Variance")
curve(dchisq(x, 6), col='red', add=TRUE, lwd=2)
plot(d, lwd=2, lty=3, main="Distribution of Sample Variance")
curve(dchisq(x, 6), col='red', add=TRUE, lwd=2)
plot(d, lwd=2, main="Distribution of Sample Variance")
curve(dchisq(x, 6), col='red', add=TRUE, lwd=2)
plot(d, lwd=2, main="Distribution of Sample Variance", xlab='sample variance')
plot(d, lwd=2, main="Distribution of Sample Variance", xlab='sample variance')
curve(dchisq(x, 6), col='red', add=TRUE, lwd=2)
legend(x="topright", legend=c("(n-1)S^2/\sigma^2", "chi-squared"))
legend(x="topright", legend=c("(n-1)S^2", "chi-squared"))
legend(x="topright", legend=c("(n-1)S^2", "chi-squared"), col=c('black', 'red'))
plot(d, lwd=2, main="Distribution of Sample Variance", xlab='sample variance')
curve(dchisq(x, 6), col='red', add=TRUE, lwd=2)
legend(x="topright", legend=c("(n-1)S^2", "chi-squared"), col=c('black', 'red'))
legend(x="topright", legend=c("(n-1)S^2", "chi-squared"), col=c('black', 'red'), lty=c(1, 1))
legend(x="topright", legend=c("(n-1)S^2", "chi-squared"), col=c('black', 'red'), lty=c(1, 1), lwd=c(2, 2))
legend(
x="topright",
legend=c(expression(*(n-1)S^2*), "chi-squared"),
legend(
x="topright",
legend=c(expression((n-1)), "chi-squared"),
col=c('black', 'red'),
lty=c(1, 1),
lwd=c(2, 2)
)
legend(
x="topright",
legend=c(expression(frac(n-1, sigma^2)), "chi-squared"),
col=c('black', 'red'),
lty=c(1, 1),
lwd=c(2, 2)
)
legend(
x="topright",
legend=c(expression(frac((n-1)*S^2, sigma^2)), "chi-squared"),
col=c('black', 'red'),
lty=c(1, 1),
lwd=c(2, 2)
)
legend(
x="topright",
legend=c(expression(frac((n-1)*S^2, sigma^2)), expression(chi^2_(n-1))),
legend=c(expression(frac((n-1)*S^2, sigma^2)), expression(chi^2),
legend(
x="topright",
legend=c(expression(frac((n-1)*S^2, sigma^2)), expression(chi^2)),
col=c('black', 'red'),
lty=c(1, 1),
lwd=c(2, 2)
)
legend(
legend(
x="topright",
legend=c(expression(frac((n-1)*S^2, sigma^2)), expression(chi)),
col=c('black', 'red'),
lty=c(1, 1),
lwd=c(2, 2)
)
legend(
x="topright",
legend=c(expression(frac((n-1)*S^2, sigma^2)), expression(chi^2)),
col=c('black', 'red'),
lty=c(1, 1),
lwd=c(2, 2)
)
plot(d, lwd=2, main="Distribution of Sample Variance", xlab='sample variance')
curve(dchisq(x, 6), col='red', add=TRUE, lwd=2)
legend(
x="topright",
legend=c(expression(frac((n-1)*S^2, sigma^2)), expression(chi^2)),
col=c('black', 'red'),
lty=c(1, 1),
lwd=c(2, 2)
)
legend(
x="topright",
legend=c(expression(frac((n-1)*S^2, sigma^2)), expression(chi^2[n-1])),
col=c('black', 'red'),
lty=c(1, 1),
lwd=c(2, 2)
)
legend(
x="topright",
legend=c(expression(frac((n-1)*S^2, sigma^2)), expression((chi^2)[n-1])),
col=c('black', 'red'),
lty=c(1, 1),
lwd=c(2, 2)
)
legend(
x="topright",
legend=c(expression(frac((n-1)*S^2, sigma^2)), expression(chi[n-1]^2)),
col=c('black', 'red'),
lty=c(1, 1),
lwd=c(2, 2)
)
plot(
d,
lwd=2,
main="Distribution of Sample Variance",
xlab='x')
curve(
dchisq(x, 6),
col='red',
add=TRUE,
lwd=2)
legend(
x="topright",
legend=c(expression(frac((n-1)*S^2, sigma^2)), expression(chi[n-1]^2)),
col=c('black', 'red'),
lty=c(1, 1),
lwd=c(2, 2)
)
# Q 61
t_sample = vector(length=trials)
for(i in 1:trials) {
sim = rnorm(3, 3, 5)
ratio = (mean(sim) - 3) / (sd(sim) / sqrt(3))
t_sample[i] = ratio
}
t_d = density(t_sample)
plot(
t_d,
lwd=2,
main="Distribution Plot, T-Distribution",
xlab='x'
)
curve(
dt(x, 2),
col='red',
add=TRUE,
lwd=2
)
t_sample[i] = ratio
for(i in 1:trials) {
sim = rnorm(3, 3, 5)
ratio = (mean(sim) - 3) / (sd(sim) / sqrt(3))
t_sample[i] = ratio
}
t_d = density(t_sample)
plot(
t_d,
lwd=2,
main="Distribution Plot, T-Distribution",
xlab='x'
)
curve(
dt(x, 2),
col='red',
add=TRUE,
lwd=2
)
legend(
x='topright',
legend=c(expression(frac(X-mu, S / sqrt(n))), expression(T[n-1])),
col=c('black', 'red'),
lty=c(1, 1),
lwd=c(2, 2)
)
legend(
x='topright',
legend=c(expression(frac(bar('X')-mu, S / sqrt(n))), expression(T[n-1])),
col=c('black', 'red'),
lty=c(1, 1),
lwd=c(2, 2)
)
variance = var(sim)
sample_var[i] = variance
for (i in 1:trials) {
sim = rnorm(7, 4, sqrt(6))
variance = var(sim)
sample_var[i] = variance
}
d = density(sample_var)
plot(
d,
lwd=2,
main="Distribution Plot, Chi-Squared",
xlab='x')
curve(
dchisq(x, 6),
col='red',
add=TRUE,
lwd=2)
legend(
x="topright",
legend=c(expression(frac((n-1)*S^2, sigma^2)), expression(chi[n-1]^2)),
col=c('black', 'red'),
lty=c(1, 1),
lwd=c(2, 2)
)
# Q 74
discrete_data = 1:10
?dgeom
dgeom(discrete_data, prob=0.75)
discrete_data - 1
dgeom(discrete_data - 1, prob=0.75)
geom = dgeom(discrete_data - 1, prob=0.75)
plot(geom)
yulesimon = 2*2*factorial(discrete_data - 1)
yulesimon = 2*2*factorial(discrete_data - 1) / factorial(discrete_data+2)
plot(yulesimon)
plot(geom)
?plot
plot(geom, pch=10)
plot(geom, pch=19)
plot(yulesimon, pch=19, col='red')
points(yulesimon, pch=19, col='red')
plot(geom, pch=19)
points(yulesimon, pch=19, col='red')
plot(geom, pch=19, ylab='probability')
points(yulesimon, pch=19, col='red')
plot(geom, pch=19, ylab='probability', xlab='x')
points(yulesimon, pch=19, col='red')
legend(x='topright', legend=c('Geometric', 'Yule-Simon'))
legend(x='topright', legend=c('Geometric', 'Yule-Simon'), col=c('black', 'red'))
plot(geom, pch=19, ylab='probability', xlab='x')
points(yulesimon, pch=19, col='red')
legend(x='topright', legend=c('Geometric', 'Yule-Simon'), col=c('black', 'red'))
legend(x='topright', legend=c('Geometric', 'Yule-Simon'), col=c('black', 'red'), pch=19)
plot(
geom,
pch=19,
ylab='probability',
xlab='x',
main='PMFs of Geometric and Yule-Simon Distributions'
)
points(
yulesimon,
pch=19,
col='red'
)
legend(
x='topright',
legend=c('Geometric', 'Yule-Simon'),
col=c('black', 'red'),
pch=19
)
# Q 78
qgamma(0.02, shape=10, rate=1/8, lower=F)
Auto <- read.table("data/Auto.data")
knitr::opts_chunk$set(echo = TRUE)
apply(USArrests, 2, rank)['Mississippi',]
?rank
setwd("~/projects/dds_transgender/candus")
library(car)
library(flexmix)
# Load in data
q88 = read.csv("q88.csv", header=T)
##### v1: G
q88logitv1 = glm(Q88 ~ TRANS_CIS, data=q88, family="binomial")
summary(q88logitv1)
?confint
q88[, -1]
q88 = q88[, -1]
q88logit = glm(Q88 ~ ., data=q88[, -1], family="binomial")
library(MASS)
# Forward Feature Selection, AIC
step_for = step_AIC(q88logit, direction="forward")
# Forward Feature Selection, AIC
step_for = stepAIC(q88logit, direction="forward")
summary(step_for)
summary(q88logit)
# Forward Feature Selection, AIC
step_for = stepAIC(q88logit, direction="forward")
summary(step_for)
q88logit = glm(Q88 ~ ., data=q88[, -3], family="binomial")
summary(q88logit)
q88logit = glm(Q88 ~ ., data=q88, family="binomial")
summary(q88logit)
# Forward Feature Selection, AIC
step_for = stepAIC(q88logit, direction="forward")
summary(step_for)
# Backward Feature Selection, AIC
step_back = stepAIC(q88logit, direction="backward")
summary(step_back)
# Both Directions Feature Selection, AIC
step_both = stepAIC(q88logit, direction="both")
summary(step_both)
View(step_for)
?glm
?stepAIC
?BIC.fsreg
?bic.fsreg
?add1
?step
step_both = step(q88logit, direction="both", k=log(2))
summary(step_both)
# Forward Feature Selection, BIC
step_both = step(q88logit, direction="both", k=log(1364))
summary(step_both)
# Load in data
q88 = read.csv("q88.csv", header=T)
View(q88)
q88 = q88[, !names(q88) %in% c("X", "SEX", "GENDER_IDENTITY", "CURRENT_SEX")]
q88logit = glm(Q88 ~ ., data=q88, family="binomial")
summary(q88logit)
# Both Directions Feature Selection, AIC
step_both = stepAIC(q88logit, direction="both")
summary(step_both)
step_both = step(q88logit, direction="both", k=log(2))
summary(step_both)
# Forward & Backward Feature Selection, BIC
step_both = step(q88logit, direction="both", k=log(1364))
summary(step_both)
# Forward & Backward Feature Selection, AIC
step_both_AIC = step(q88logit, direction="both", k=log(2))
summary(step_both)
# Forward & Backward Feature Selection, BIC
step_both_BIC = step(q88logit, direction="both", k=log(1364))
summary(step_both)
# Forward & Backward Feature Selection, AIC
step_both_AIC = step(q88logit, direction="both",
scope=list(lower=Q88 ~ TRANS_CIS,
upper=Q88 ~ .), k=log(2))
summary(step_both)
# Forward & Backward Feature Selection, AIC
step_both_AIC = step(q88logit, direction="both",
scope=list(lower=Q88 ~ TRANS_CIS,
upper=Q88 ~ .), k=log(2))
summary(step_both_AIC)
# Forward & Backward Feature Selection, BIC
step_both_BIC = step(q88logit, direction="both",
scope=list(lower=Q88 ~ TRANS_CIS,
upper=Q88 ~ .), k=log(1364))
summary(step_both_BIC)
# Forward & Backward Feature Selection, AIC
step_both_AIC = step(q88logit, direction="both",
scope=list(lower=Q88 ~ TRANS_CIS,
upper=Q88 ~ .^2), k=log(2))
summary(step_both_AIC)
# Forward & Backward Feature Selection, BIC
step_both_BIC = step(q88logit, direction="both",
scope=list(lower=Q88 ~ TRANS_CIS,
upper=Q88 ~ .^2), k=log(1364))
summary(step_both_BIC)
# Forward & Backward Feature Selection, AIC
step_both_AIC = step(q88logit, direction="both",
scope=list(lower=Q88 ~ TRANS_CIS,
upper=Q88 ~ .), k=log(2))
# Forward & Backward Feature Selection, BIC
step_both_BIC = step(q88logit, direction="both",
scope=list(lower=Q88 ~ TRANS_CIS,
upper=Q88 ~ .^2), k=log(1364))
summary(step_both_BIC)
# Forward & Backward Feature Selection, BIC
step_both_BIC = step(q88logit, direction="both",
scope=list(lower=Q88 ~ TRANS_CIS,
upper=Q88 ~ .), k=log(1364))
summary(step_both_BIC)
q88$GEDUCATION = factor(q88$GEDUCATION)
q88logit = glm(Q88 ~ ., data=q88, family="binomial")
summary(q88logit)
# Forward & Backward Feature Selection, AIC
step_both_AIC = step(q88logit, direction="both",
scope=list(lower=Q88 ~ TRANS_CIS,
upper=Q88 ~ .^2), k=log(2))
# Forward & Backward Feature Selection, AIC
step_both_AIC = step(q88logit, direction="both",
scope=list(lower=Q88 ~ TRANS_CIS,
upper=Q88 ~ .), k=log(2))
summary(step_both_AIC)
# Forward & Backward Feature Selection, BIC
step_both_BIC = step(q88logit, direction="both",
scope=list(lower=Q88 ~ TRANS_CIS,
upper=Q88 ~ .^2), k=log(1364))
summary(step_both_BIC)
# Forward & Backward Feature Selection, AIC
step_both_AIC = step(q88logit, direction="both",
scope=list(lower=Q88 ~ TRANS_CIS,
upper=Q88 ~ .^2), k=log(2))
summary(step_both_AIC)
# Forward & Backward Feature Selection, BIC
step_both_BIC = step(q88logit, direction="both",
scope=list(lower=Q88 ~ TRANS_CIS,
upper=Q88 ~ .^2), k=log(1364))
summary(step_both_BIC)
?regsubsets
library(leaps)
?regsubsets
# Forward Feature Selection, BIC, regsubsets
ffs = regsubsets(Q88 ~ ., data=q88)
summary(ffs)
# Forward Feature Selection, BIC, regsubsets
ffs = regsubsets(Q88 ~ ., data=q88, method="forward")
summary(ffs)
# Forward Feature Selection, BIC, regsubsets
q88sub = q88[, !names(q88) %in% c("HINC_I", "HINC_I_means", "HINC_I_strat")]
ffs = regsubsets(Q88 ~ ., data=q88sub, method="forward")
summary(ffs)
q88$Q93 = factor(q88$Q93)
q88logit = glm(Q88 ~ ., data=q88, family="binomial")
q88logit = glm(Q88 ~ ., data=q88, family="binomial")
summary(q88logit)
# Forward Feature Selection, BIC, regsubsets
q88sub = q88[, !names(q88) %in% c("HINC_I", "HINC_I_means", "HINC_I_strat")]
ffs = regsubsets(Q88 ~ ., data=q88sub, method="forward")
summary(ffs)
bfs = regsubsets(Q88 ~ ., data=q88sub, method="backward")
summary(bfs)
setwd("~/projects/dds_transgender/candus")
library(car)
library(flexmix)
library(MASS)
library(leaps)
# Load in data
q88 = read.csv("q88.csv", header=T)
q88 = q88[, !names(q88) %in% c("X", "SEX", "GENDER_IDENTITY", "CURRENT_SEX")]
q88$GEDUCATION = factor(q88$GEDUCATION)
q88$Q93 = factor(q88$Q93)
q88logit = glm(Q88 ~ ., data=q88, family="binomial")
summary(q88logit)
# Forward & Backward Feature Selection, BIC
step_both_BIC = step(q88logit, direction="both",
scope=list(lower=Q88 ~ TRANS_CIS,
upper=Q88 ~ .^2), k=log(1364))
summary(step_both_BIC)
# Load in data
q88 = read.csv("q88.csv", header=T)
q88 = q88[, !names(q88) %in% c("X", "SEX", "GENDER_IDENTITY", "CURRENT_SEX")]
q88$GEDUCATION = factor(q88$GEDUCATION)
q88$Q93 = factor(q88$Q93)
q88$RACE_RECODE_CAT5 = factor(q88$RACE_RECODE_CAT5)
q88$POVERTYCAT_I = factor(q88$POVERTYCAT_I)
q88logit = glm(Q88 ~ ., data=q88, family="binomial")
summary(q88logit)
# Forward & Backward Feature Selection, BIC
step_both_BIC = step(q88logit, direction="both",
scope=list(lower=Q88 ~ TRANS_CIS,
upper=Q88 ~ .^2), k=log(1364))
summary(step_both_BIC)
# Forward Feature Selection, BIC, regsubsets
q88sub = q88[, !names(q88) %in% c("HINC_I", "HINC_I_means", "HINC_I_strat")]
ffs = regsubsets(Q88 ~ ., data=q88sub, method="forward")
summary(ffs)
names(ffs)
ffs$rss
coef(ffs)
coef(ffs, 5)
coef(ffs, 4)
bfs = regsubsets(Q88 ~ ., data=q88sub, method="backward")
summary(bfs)
names(step_both_BIC)
step_both_BIC$anova
