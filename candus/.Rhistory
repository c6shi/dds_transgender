sim = rexp(n, rate=3)
ratio = (mean(sim) - (1/3)) / (sd(sim) / sqrt(n))
approximation[i] = ratio
}
plot(
density(approximation),
xlim = c(-4, 4),
lwd=2,
col=color,
main=paste("Empirical Exponential and T-Distribution,", as.character(n), sep=" n = ")
)
curve(
dt(x, 3),
from=-4, to=4,
lty=2, lwd=2,
add=T,
col=color
)
legend(
x='topright',
legend=c(expression(X~Exp(lambda=3)), expression(T[n-1])),
col=color,
lty=c(1, 2),
lwd=c(2, 2)
)
}
graph_n(60, 'red')
graph_n = function(n, color) {
approximation = vector(length=trials)
for(i in 1:trials) {
sim = rexp(n, rate=3)
ratio = (mean(sim) - (1/3)) / (sd(sim) / sqrt(n))
approximation[i] = ratio
}
plot(
density(approximation),
xlim = c(-4, 4),
lwd=2,
col=color,
main=paste("Empirical Exponential and T-Distribution,", as.character(n), sep=" n = ")
)
curve(
dt(x, 3),
from=-4, to=4,
lty=2, lwd=2,
add=T,
col=color
)
legend(
x='topright',
legend=c(expression(Exp(lambda=3)), expression(T[n-1])),
col=color,
lty=c(1, 2),
lwd=c(2, 2)
)
}
graph_n(60, 'red')
par(mfrow=c(2,2))
graph_n(4, 'red')
graph_n(10, 'blue')
graph_n(30, 'green')
graph_n(60, 'purple')
graph_n = function(n, color) {
approximation = vector(length=trials)
for(i in 1:trials) {
sim = rexp(n, rate=3)
ratio = (mean(sim) - (1/3)) / (sd(sim) / sqrt(n))
approximation[i] = ratio
}
plot(
density(approximation),
xlim = c(-4, 4),
lwd=2,
col=color,
main=paste("Empirical Exponential and T-Distribution,", as.character(n), sep=" n = ")
)
curve(
dt(x, 3),
from=-4, to=4,
lty=2, lwd=2,
add=T,
col=color
)
legend(
x='topright',
cex=0.5,
legend=c(expression(Exp(lambda=3)), expression(T[n-1])),
col=color,
lty=c(1, 2),
lwd=c(2, 2)
)
}
par(mfrow=c(2,2))
graph_n(4, 'red')
graph_n(10, 'blue')
graph_n(30, 'green')
graph_n(60, 'purple')
graph_n = function(n, color) {
approximation = vector(length=trials)
for(i in 1:trials) {
sim = rexp(n, rate=3)
ratio = (mean(sim) - (1/3)) / (sd(sim) / sqrt(n))
approximation[i] = ratio
}
plot(
density(approximation),
xlim = c(-4, 4),
lwd=2,
col=color,
main=paste("Empirical Exponential and T-Distribution,", as.character(n), sep=" n = "),
xlab=''
)
curve(
dt(x, 3),
from=-4, to=4,
lty=2, lwd=2,
add=T,
col=color
)
legend(
x='topright',
cex=0.5,
legend=c(expression(Exp(lambda=3)), expression(T[n-1])),
col=color,
lty=c(1, 2),
lwd=c(2, 2)
)
}
par(mfrow=c(2,2))
graph_n(4, 'red')
graph_n(10, 'blue')
graph_n(30, 'green')
graph_n(60, 'purple')
graph_n = function(n, color) {
approximation = vector(length=trials)
for(i in 1:trials) {
sim = rexp(n, rate=3)
ratio = (mean(sim) - (1/3)) / (sd(sim) / sqrt(n))
approximation[i] = ratio
}
plot(
density(approximation),
xlim = c(-4, 4),
lwd=2,
col=color,
main=paste("Empirical Exponential and T-Distribution,", as.character(n), sep=" n = "),
xlab=''
)
curve(
dt(x, 3),
from=-4, to=4,
lty=2, lwd=2,
add=T,
col=color
)
legend(
x='topright',
cex=0.8,
legend=c(expression(Exp(lambda=3)), expression(T[n-1])),
col=color,
lty=c(1, 2),
lwd=c(2, 2)
)
}
par(mfrow=c(2,2))
graph_n(4, 'red')
graph_n(10, 'blue')
graph_n(30, 'green')
graph_n(60, 'purple')
graph_n = function(n, color) {
approximation = vector(length=trials)
for(i in 1:trials) {
sim = rexp(n, rate=3)
ratio = (mean(sim) - (1/3)) / (sd(sim) / sqrt(n))
approximation[i] = ratio
}
plot(
density(approximation),
xlim = c(-4, 4),
lwd=2,
col=color,
main=paste("Empirical Exponential and T-Distribution,", as.character(n), sep=" n = "),
xlab=''
)
curve(
dt(x, 3),
from=-4, to=4,
lty=2, lwd=2,
add=T,
col=color
)
legend(
x='topright',
cex=0.9,
legend=c(expression(Exp(lambda=3)), expression(T[n-1])),
col=color,
lty=c(1, 2),
lwd=c(2, 2)
)
}
par(mfrow=c(2,2))
graph_n(4, 'red')
graph_n(10, 'blue')
graph_n(30, 'green')
graph_n(60, 'purple')
# Q 68
data = c(206.5, 198.9, 205.2, 205.8, 192.0, 199.5, 182.5, 191.9, 197.6, 190.7, 186.8, 187.3, 192.0)
mean(data)
sd(data)
12 * (7.766422)^2 / 100
pchisq(7.238, df=12)
qchisq(0.98, df=12)
qchisq(0.02, df=12)
12 * (7.766422)^2 / qchisq(0.98, df=12)
12 * (7.766422)^2 / qchisq(0.02, df=12)
# Q 69
23 * (18.3^2) / 19.2^2
qchisq(0.01, df=23)
qchisq(0.99, df=23)
(138.96-156)/ (19.2 / sqrt(24))
qnorm(-4.348)
pnorm(-4.348)
# Q 73
qchisq(0.92, df=12)
# Q 75
qgamma(0.03, shape=16, rate=2, lower=F)
pgamma(12.16027, shape=16, rate=1, lower=F)
pbinom(5, 12, 0.5)
qnorm(0.08)
qnorm(0.08,lower=F)
data = c(6.55, 6.09, 7.64, 7.43, 7.84, 6.59, 6.41, 7.06, 7.37, 7.08, 7.33, 7.87)
var(data)
qchisq(0.05, df=11)
qchisq(0.95, df=11)
denom = var(data) * 11
denom = var(data) * 11
qchisq(0.05, df=11) / denom
qchisq(0.95, df=11) / denom
data - 7
(data - 7)^2
sum((data - 7)^2)
sum((data - 7)^2) / 2
(sum((data - 7)^2) / 2) - 2
(sum((data - 7)^2) / 2) + 2
qgamma(0.05, 15, 3.9298)
qgamma(0.05, 15, 3.9298, lower=F)
qgamma(0.95, 15, 3.9298)
qchisq(0.05, df=120, lower=F)
qchisq(0.05, df=80, lower=F)
c = qchisq(0.05, df=80, lower=F)
pchisq(c, df=120)
pchisq(0.1, df=2)
pchisq(0.211, df=2)
pchisq(c, df=120, lower=F)
pchisq(0.211, df=2, lower=F)
data = c(6.55, 6.09, 7.64, 7.43, 7.84, 6.59, 6.41, 7.06, 7.37, 7.08, 7.33, 7.87)
mean(data)
data - mean(data)
(data - mean(data))^2
sum((data - mean(data))^2)
qchisq(0.05, df=11)
qnorm(0.08,lower=F)
setwd("~/academics/MATH189/homeworks")
### HW 4
hw4.dat = read.csv("homework4_insurance.csv")
View(hw4.dat)
### HW 4 Q2
nutrients = read.csv("nutrients.csv")
View(nutrients)
mean(nutrients)
nutrients.columns
names(nutrients)
for (i in names(nutrients)) {
print(mean(nutrients$i))
}
select(nutrients, 'calcium')
colMeans(nutrienets)
colMeans(nutrients)
?sapply
lapply(nutrients, mean)
sapply(nutrients, mean)
sapply(nutrients, sd)
population_nutrients = c(1000, 15, 60, 800, 75)
?t.test
pvalues = numeric(5)
for (i in 1:5) {
t_test = t.test(sapply(nutrients, mean), population_nutrients)
pvalues[i] = t_test$p.value
}
pvalues
smeans = sapply(nutrients, mean)
smeans = sapply(nutrients, mean)
ssd = sapply(nutrients, sd)
t = (smeans - population_nutrients) / (ssd / sqrt(737))
t
for (i in t) {
print(i)
}
pvalues = numeric(5)
for (i in t) {
pvalues[i] = 2*pt(i, 736)
}
pvalues
smeans
pvalues = numeric(5)
pvalues = numeric(5)
for (i in t) {
pvalues[i] = pt(i, 736)
}
pvalues
t.test(nutrients[1], alternative="two.sided", mu=1000)
pvalues = numeric(5)
for (i in 1:5) {
pvalues[i] = pt(t[i], 736)
}
pvalues
pvalues = numeric(5)
for (i in 1:5) {
pvalues[i] = 2*pt(t[i], 736)
}
pvalues
pvalues = numeric(5)
pvalues = numeric(5)
pvalues = numeric(5)
for (i in 1:5) {
pvalues[i] = 2*pt(t[i], 736, lower=F)
}
pvalues
t
?t.test
### HW 4 Q3
multiple = read.txt("multiple.txt")
### HW 4 Q3
multiple = read.table("multiple.txt", header=F)
multiple
View(multiple)
?cbind
m = cbind(1, 1:7)
m
x1 = matrix(rnorm(100 * 50), 100, 50)
x1
x = cbind(x1, x2)
x2 = matrix(rnorm(100 * 45, 1, 1), 100, 45)
x = cbind(x1, x2)
x
x[, 1]
?t.test
pvalues = numeric(50)
for (i in 1:50) {
t_test = t.test(multiple[,i], mu=0, conf.level=0.99)
pvalues[i] = t_test$p.value
}
pvalues
sum(pvalues[1:20] < 0.05)
type1 = sum(pvalues[21:50] < 0.05)
type1,
type1
type2 = sum(pvalues[1:20] > 0.05)
type2
fdp = type1 / 50
fdp
smeans = sapply(nutrients, mean)
ssd = sapply(nutrients, sd)
population_nutrients = c(1000, 15, 60, 800, 75)
t = (smeans - population_nutrients) / (ssd / sqrt(737))
t
pvalues = numeric(5)
for (i in 1:5) {
t_test = t.test(nutrients[,i], mu=population_nutrients[i])
pvalues = t_test$p.value
}
pvalues
### HW 4 Q2
nutrients = read.csv("nutrients.csv")
smeans = sapply(nutrients, mean)
ssd = sapply(nutrients, sd)
population_nutrients = c(1000, 15, 60, 800, 75)
pvalues = numeric(5)
for (i in 1:5) {
t_test = t.test(nutrients[,i], mu=population_nutrients[i])
pvalues = t_test$p.value
}
pvalues
### HW 4 Q2
nutrients = read.csv("nutrients.csv")
smeans = sapply(nutrients, mean)
ssd = sapply(nutrients, sd)
population_nutrients = c(1000, 15, 60, 800, 75)
t = (smeans - population_nutrients) / (ssd / sqrt(737))
t
pvalues = numeric(5)
for (i in 1:5) {
t_test = t.test(nutrients[,i], mu=population_nutrients[i])
pvalues[i] = t_test$p.value
}
pvalues
setwd("~/projects/dds_transgender/candus")
require(coin)
require(MASS)
require(ggplot2)
require(foreign)
require(Hmisc)
require(reshape2)
# Mann Whitney U Test
q84 = read.csv("q84.csv", header=T)
setwd("~/projects/dds_transgender/candus")
setwd("~/projects/dds_transgender/candus")
require(coin)
require(MASS)
require(ggplot2)
require(foreign)
require(Hmisc)
require(reshape2)
# Mann Whitney U Test
q84 = read.csv("q84.csv", header=T)
q84.trans = q84$X1[1:5]
q84.cis = q84$X2[1:5]
wilcox.test(q84.trans, q84.cis)
View(q84)
# Mann Whitney U Test
q84 = read.csv("q84.csv", header=T)
q84.trans = q84$X1
q84.cis = q84$X2
wilcox.test(q84.trans, q84.cis)
?wilcox.test
# Fisher's Test
q88 = read.csv("q88.csv", header=T)
chisq.test(q88)
fisher.test(q88)
View(q88)
q88 = q88[, c("X1", "X2")]
chisq.test(q88)
# Fisher's Test
q88 = read.csv("q88.csv", header=T)
q88 = q88[, c("X1", "X2")]
chisq.test(q88)
matrix(c(25, 5, 15, 15), ncol=2, byrow=T)
fisher.test(q88)
(74 + 119) / (269 + 1133)
74 / 269
119/1133
X_T = 74
X_C = 119
n = 269
m = 1133
p_T = X_T / n
p_C = X_C / m
p_e = (X_T + X_C) / (n + m)
Z = (p_T - p_C)
Z = (p_T - p_C) / sqrt((p_e * (1 - p_e) / n) + (p_e * (1 - p_e) / m)
Z = (p_T - p_C) / sqrt((p_e * (1 - p_e) / n) + (p_e * (1 - p_e) / m))
Z = (p_T - p_C) / sqrt((p_e * (1 - p_e) / n) + (p_e * (1 - p_e) / m))
pnorm(Z, lower=F)
# Two-Proportion Z-Test
two_prop_z = function(X_T, X_C, n, m) {
p_T = X_T / n
p_C = X_C / m
p_e = (X_T + X_C) / (n + m)
Z = (p_T - p_C) / sqrt((p_e * (1 - p_e) / n) + (p_e * (1 - p_e) / m))
p_value = pnorm(Z, lower=F)
return (p_value)
}
# Q85
X_T_85 = 86
X_C_85 = 206
n_85 = 273
m_85 = 1138
two_prop_z(X_T_85, X_C_85, n_85, m_85)
# Q88
X_T_88 = 74
X_C_88 = 119
n_88 = 269
m_88 = 1133
two_prop_z(X_T_88, X_C_88, n_88, m_88)
prop.test(x=c(74, 119), n=c(269, 1133), alternative='greater')
# Q88
X_T_88 = 74
# Q88
X_T_88 = 74
# Q88
X_T_88 = 74
X_C_88 = 119
n_88 = 269
m_88 = 1133
two_prop_z(X_T_88, X_C_88, n_88, m_88)
p_T = X_T / n
p_T = X_T / n
p_C = X_C / m
p_e = (X_T + X_C) / (n + m)
Z = (p_T - p_C) / sqrt((p_e * (1 - p_e) / n) + (p_e * (1 - p_e) / m))
pnorm(Z, lower=F)
prop.test(x=c(74, 119), n=c(269, 1133), alternative='greater', correct=F)
## Q88 + stratified income
prop.test(x=c(5, 13), n=c(45, 346), alternative='greater', correct=F)
## Q88 + stratified income
prop.test(x=c(5, 13), n=c(45, 346), alternative='greater', correct=F)
prop.test(x=c(14, 30), n=c(70, 368), alternative='greater', correct=F)
prop.test(x=c(55, 76), n=c(99, 419), alternative='greater', correct=F)
## Q88 + stratified income
# high
prop.test(x=c(5, 13), n=c(45, 346), alternative='greater', correct=T)
# middle
prop.test(x=c(14, 30), n=c(70, 368), alternative='greater', correct=T)
# low
prop.test(x=c(55, 76), n=c(99, 419), alternative='greater', correct=T)
# Q85 + stratified income
# high
prop.test(x=c(14, 50), n=c(46, 350), alternative='greater')
# mid
prop.test(x=c(18, 66), n=c(70, 370), alternative='greater')
# low
prop.test(x=c(54, 90), n=c(157, 418), alternative='greater')
